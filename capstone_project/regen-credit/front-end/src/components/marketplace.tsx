"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Loader2, Leaf, Search, Filter } from "lucide-react";

// Solana & Anchor imports
import {
  useAnchorWallet,
  useConnection,
  useWallet,
} from "@solana/wallet-adapter-react";
import { AnchorProvider, Program, setProvider, web3 } from "@coral-xyz/anchor";
import { RegenCredit } from "../../../target/types/regen_credit";
import idl from "../../../target/idl/regen_credit.json"; // this is the idl file generated by anchor
import { PublicKey } from "@solana/web3.js";

// Mock data for marketplace listings
const mockListings = [
  {
    id: "list-001",
    amount: 25,
    remaining: 25,
    price: 0.05,
    sourceType: "solar",
    country: "usa",
    seller: "8xDr5JxL9aPmj1fgM9ckVEPF3QPuQsYhX7PVozMRtC5H",
    createdAt: "2023-05-15",
  },
  {
    id: "list-002",
    amount: 18,
    remaining: 18,
    price: 0.08,
    sourceType: "wind",
    country: "germany",
    seller: "6Ede7dBW8q7uVJpKCLBwfCXNVJxUTvxDCpP2LzKxrHbG",
    createdAt: "2023-06-22",
  },
  {
    id: "list-003",
    amount: 42,
    remaining: 42,
    price: 0.04,
    sourceType: "hydro",
    country: "canada",
    seller: "3xYr5JxL9aPmj1fgM9ckVEPF3QPuQsYhX7PVozMRtC5H",
    createdAt: "2023-07-10",
  },
  {
    id: "list-004",
    amount: 15,
    remaining: 10,
    price: 0.06,
    sourceType: "biomass",
    country: "uk",
    seller: "9zDr5JxL9aPmj1fgM9ckVEPF3QPuQsYhX7PVozMRtC5H",
    createdAt: "2023-08-05",
  },
];

export function Marketplace() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedListing, setSelectedListing] = useState<any>(null);
  const [purchaseAmount, setPurchaseAmount] = useState("");
  const [loading, setLoading] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);

  const filteredListings = mockListings.filter(
    (listing) =>
      listing.sourceType.includes(searchTerm.toLowerCase()) ||
      listing.country.includes(searchTerm.toLowerCase())
  );

  const wallet = useAnchorWallet();
  const { connection } = useConnection();
  if (!wallet) {
    console.error("Wallet not connected");
    return;
  }
  const provider = new AnchorProvider(connection, wallet, {
    commitment: "confirmed",
  });
  setProvider(provider);

  const program = new Program(idl as RegenCredit, provider);

  const handlePurchase = () => {
    if (!selectedListing || !purchaseAmount) return;

    const amount = Number.parseInt(purchaseAmount);
    if (isNaN(amount) || amount <= 0 || amount > selectedListing.remaining)
      return;

    setLoading(true);

    // Simulate blockchain transaction
    setTimeout(() => {
      setLoading(false);
      setOpenDialog(false);

      toast(
        `Successfully purchased ${amount} carbon credits for ${(
          amount * selectedListing.price
        ).toFixed(2)} SOL.`
      );

      // Reset form
      setSelectedListing(null);
      setPurchaseAmount("");
    }, 2000);
  };

  return (
    <div className="space-y-6">
      <Card className="w-full">
        <CardHeader>
          <CardTitle>Carbon Credits Marketplace</CardTitle>
          <CardDescription>
            Browse and purchase carbon credits from verified sources.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-2 mb-6">
            <div className="relative flex-1">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
              <Input
                placeholder="Search by source type or country..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-8"
              />
            </div>
            <Button variant="outline" size="icon">
              <Filter className="h-4 w-4" />
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {filteredListings.map((listing) => (
              <div
                key={listing.id}
                className="p-4 rounded-lg border border-gray-200 hover:border-green-300 transition-colors"
              >
                <div className="flex justify-between items-start mb-3">
                  <div className="flex items-center gap-2">
                    <Leaf className="h-5 w-5 text-green-600" />
                    <h3 className="font-medium">
                      {listing.remaining} / {listing.amount} Credits Available
                    </h3>
                  </div>
                  <div className="text-sm font-medium text-green-700">
                    {listing.price} SOL per credit
                  </div>
                </div>

                <div className="mb-4 text-sm text-gray-600">
                  <p>
                    Source:{" "}
                    {listing.sourceType.charAt(0).toUpperCase() +
                      listing.sourceType.slice(1)}
                  </p>
                  <p>Country: {listing.country.toUpperCase()}</p>
                  <p>
                    Seller: {listing.seller.slice(0, 4)}...
                    {listing.seller.slice(-4)}
                  </p>
                </div>

                <Dialog
                  open={openDialog && selectedListing?.id === listing.id}
                  onOpenChange={(open) => {
                    setOpenDialog(open);
                    if (!open) setSelectedListing(null);
                  }}
                >
                  <DialogTrigger asChild>
                    <Button
                      onClick={() => {
                        setSelectedListing(listing);
                        setOpenDialog(true);
                        setPurchaseAmount("");
                      }}
                      className="w-full bg-green-600 hover:bg-green-700"
                    >
                      Purchase Credits
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Purchase Carbon Credits</DialogTitle>
                      <DialogDescription>
                        Enter the amount of carbon credits you want to purchase.
                      </DialogDescription>
                    </DialogHeader>

                    <div className="space-y-4 py-4">
                      <div className="space-y-2">
                        <Label htmlFor="amount">Number of Credits</Label>
                        <Input
                          id="amount"
                          type="number"
                          min="1"
                          max={selectedListing?.remaining}
                          placeholder={`Max: ${selectedListing?.remaining}`}
                          value={purchaseAmount}
                          onChange={(e) => setPurchaseAmount(e.target.value)}
                        />
                      </div>

                      {purchaseAmount &&
                        !isNaN(Number.parseInt(purchaseAmount)) &&
                        Number.parseInt(purchaseAmount) > 0 && (
                          <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                            <h4 className="font-medium text-green-800 mb-2">
                              Purchase Summary
                            </h4>
                            <div className="space-y-1 text-sm text-green-700">
                              <div className="flex justify-between">
                                <span>Credits:</span>
                                <span>{purchaseAmount}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>Price per Credit:</span>
                                <span>{selectedListing?.price} SOL</span>
                              </div>
                              <div className="flex justify-between">
                                <span>Marketplace Fee (2%):</span>
                                <span>
                                  {(
                                    Number.parseInt(purchaseAmount) *
                                    selectedListing?.price *
                                    0.02
                                  ).toFixed(4)}{" "}
                                  SOL
                                </span>
                              </div>
                              <div className="border-t border-green-200 mt-2 pt-2 flex justify-between font-medium">
                                <span>Total:</span>
                                <span>
                                  {(
                                    Number.parseInt(purchaseAmount) *
                                    selectedListing?.price *
                                    1.02
                                  ).toFixed(4)}{" "}
                                  SOL
                                </span>
                              </div>
                            </div>
                          </div>
                        )}
                    </div>

                    <DialogFooter>
                      <Button
                        onClick={handlePurchase}
                        disabled={
                          loading ||
                          !purchaseAmount ||
                          isNaN(Number.parseInt(purchaseAmount)) ||
                          Number.parseInt(purchaseAmount) <= 0 ||
                          Number.parseInt(purchaseAmount) >
                            (selectedListing?.remaining || 0)
                        }
                        className="bg-green-600 hover:bg-green-700"
                      >
                        {loading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Processing...
                          </>
                        ) : (
                          "Confirm Purchase"
                        )}
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
