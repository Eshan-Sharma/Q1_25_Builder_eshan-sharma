"use client";

import type React from "react";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { toast } from "sonner";
import { Loader2 } from "lucide-react";

// Solana & Anchor imports
import {
  useAnchorWallet,
  useConnection,
  useWallet,
} from "@solana/wallet-adapter-react";
import { AnchorProvider, Program, setProvider, web3 } from "@coral-xyz/anchor";
import { RegenCredit } from "../../../target/types/regen_credit";
import idl from "../../../target/idl/regen_credit.json"; // this is the idl file generated by anchor
import { PublicKey } from "@solana/web3.js";

export function CreateCarbonCredits() {
  const { publicKey, signTransaction, connected } = useWallet();

  const [loading, setLoading] = useState(false);
  const [country, setCountry] = useState("");
  const [energyValue, setEnergyValue] = useState("");
  const [energyUnit, setEnergyUnit] = useState("");
  const [sourceType, setSourceType] = useState("");
  const [pricePerCredit, setPricePerCredit] = useState("");

  const wallet = useAnchorWallet();
  const { connection } = useConnection();
  if (!wallet) {
    console.error("Wallet not connected");
    return;
  }
  const provider = new AnchorProvider(connection, wallet, {
    commitment: "confirmed",
  });
  setProvider(provider);

  const program = new Program(idl as RegenCredit, provider);

  //Country Start
  // const Country = {
  //   UnitedKingdom: {},
  //   SouthAfrica: {},
  //   China: {},
  //   HongKong: {},
  //   India: {},
  //   Indonesia: {},
  //   Japan: {},
  //   Korea: {},
  //   Thailand: {},
  //   Australia: {},
  //   NewZealand: {},
  //   SaudiArabia: {},
  //   Turkey: {},
  //   UnitedArabEmirates: {},
  //   Canada: {},
  //   Mexico: {},
  //   UnitedStates: {},
  //   Argentina: {},
  //   Brazil: {},
  //   Austria: {},
  //   Belgium: {},
  //   Bulgaria: {},
  //   Croatia: {},
  //   Cyprus: {},
  //   CzechRepublic: {},
  //   Denmark: {},
  //   Estonia: {},
  //   Finland: {},
  //   France: {},
  //   Germany: {},
  //   Greece: {},
  //   Hungary: {},
  //   Iceland: {},
  //   Ireland: {},
  //   Italy: {},
  //   Latvia: {},
  //   Lithuania: {},
  //   Luxembourg: {},
  //   Malta: {},
  //   Netherlands: {},
  //   Norway: {},
  //   Poland: {},
  //   Portugal: {},
  //   Romania: {},
  //   RussianFederation: {},
  //   Serbia: {},
  //   Slovakia: {},
  //   Slovenia: {},
  //   Spain: {},
  //   Sweden: {},
  //   Switzerland: {},
  // } as const;
  // type CountryType = keyof typeof Country;
  //Country End
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    console.log("Here");
    console.log(country, energyValue, energyUnit, sourceType, pricePerCredit);

    if (!connected || !publicKey) {
      toast.error("Please connect your wallet!");
      return;
    }
    if (!country || !energyValue || !energyUnit || !pricePerCredit) {
      toast.error("Please fill all required fields!");
      return;
    }
    setLoading(true);

    try {
      const parsedEnergyValue = parseInt(energyValue);
      const parsedPricePerCredit = parseInt(pricePerCredit);

      if (
        Number.isNaN(parsedEnergyValue) ||
        Number.isNaN(parsedPricePerCredit)
      ) {
        toast.error("Invalid numeric input.");
        setLoading(false);
        return;
      }

      console.log("here again");
      console.log(
        `{${country}:{}}`,
        parsedPricePerCredit,
        parsedEnergyValue,
        `{${energyUnit}:{}}`,
        sourceType
      );
      const selectedCountry = {
        [country]: {},
      };
      const selectedEnergyUnit = {
        [energyUnit]: {},
      };

      console.log(
        selectedCountry,
        parsedPricePerCredit,
        parsedEnergyValue,
        selectedEnergyUnit
      );

      if (!country || !energyUnit) {
        toast.error("Invalid country or unit selected.");
        setLoading(false);
        return;
      }

      const [carbonCreditPDA] = await PublicKey.findProgramAddress(
        [Buffer.from("carbon_credit"), publicKey.toBuffer()],
        program.programId
      );

      //Transaction
      const tx = await program.methods
        .initializeCarbonCredit(
          selectedCountry,
          parsedPricePerCredit,
          parsedEnergyValue,
          selectedEnergyUnit
        )
        .accounts({
          maker: publicKey,
          carbonCredit: carbonCreditPDA,
          systemProgram: web3.SystemProgram.programId,
        })
        .rpc();

      toast.success(`Transaction successful! Tx ID: ${tx}`);
    } catch (error) {
      console.error("Transaction failed", error);
      toast.error("Transaction failed. Check console for details.");
    } finally {
      // Reset form
      setCountry("");
      setEnergyValue("");
      setEnergyUnit("");
      setSourceType("");
      setPricePerCredit("");
      setLoading(false);
    }
  };
  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Create Carbon Credits</CardTitle>
        <CardDescription>
          Enter information about your green energy production to generate
          carbon credits.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="country">Country</Label>
              <Select value={country} onValueChange={setCountry} required>
                <SelectTrigger id="country">
                  <SelectValue placeholder="Select country" />
                </SelectTrigger>
                <SelectContent>
                  {/* 51 countries supported */}
                  <SelectItem value="argentina">Argentina</SelectItem>
                  <SelectItem value="australia">Australia</SelectItem>
                  <SelectItem value="austria">Austria</SelectItem>
                  <SelectItem value="belgium">Belgium</SelectItem>
                  <SelectItem value="brazil">Brazil</SelectItem>
                  <SelectItem value="bulgaria">Bulgaria</SelectItem>
                  <SelectItem value="canada">Canada</SelectItem>
                  <SelectItem value="china">China</SelectItem>
                  <SelectItem value="croatia">Croatia</SelectItem>
                  <SelectItem value="cyprus">Cyprus</SelectItem>
                  <SelectItem value="czech_republic">Czech Republic</SelectItem>
                  <SelectItem value="denmark">Denmark</SelectItem>
                  <SelectItem value="estonia">Estonia</SelectItem>
                  <SelectItem value="finland">Finland</SelectItem>
                  <SelectItem value="france">France</SelectItem>
                  <SelectItem value="germany">Germany</SelectItem>
                  <SelectItem value="greece">Greece</SelectItem>
                  <SelectItem value="hong_kong">Hong Kong</SelectItem>
                  <SelectItem value="hungary">Hungary</SelectItem>
                  <SelectItem value="iceland">Iceland</SelectItem>
                  <SelectItem value="india">India</SelectItem>
                  <SelectItem value="indonesia">Indonesia</SelectItem>
                  <SelectItem value="ireland">Ireland</SelectItem>
                  <SelectItem value="italy">Italy</SelectItem>
                  <SelectItem value="japan">Japan</SelectItem>
                  <SelectItem value="korea">Korea</SelectItem>
                  <SelectItem value="latvia">Latvia</SelectItem>
                  <SelectItem value="lithuania">Lithuania</SelectItem>
                  <SelectItem value="luxembourg">Luxembourg</SelectItem>
                  <SelectItem value="malta">Malta</SelectItem>
                  <SelectItem value="mexico">Mexico</SelectItem>
                  <SelectItem value="netherlands">Netherlands</SelectItem>
                  <SelectItem value="new_zealand">New Zealand</SelectItem>
                  <SelectItem value="norway">Norway</SelectItem>
                  <SelectItem value="poland">Poland</SelectItem>
                  <SelectItem value="portugal">Portugal</SelectItem>
                  <SelectItem value="romania">Romania</SelectItem>
                  <SelectItem value="russian_federation">
                    Russian Federation
                  </SelectItem>
                  <SelectItem value="saudi_arabia">Saudi Arabia</SelectItem>
                  <SelectItem value="serbia">Serbia</SelectItem>
                  <SelectItem value="slovakia">Slovakia</SelectItem>
                  <SelectItem value="slovenia">Slovenia</SelectItem>
                  <SelectItem value="south_africa">South Africa</SelectItem>
                  <SelectItem value="spain">Spain</SelectItem>
                  <SelectItem value="sweden">Sweden</SelectItem>
                  <SelectItem value="switzerland">Switzerland</SelectItem>
                  <SelectItem value="thailand">Thailand</SelectItem>
                  <SelectItem value="turkey">Turkey</SelectItem>
                  <SelectItem value="united_arab_emirates">
                    United Arab Emirates
                  </SelectItem>
                  <SelectItem value="united_kingdom">United Kingdom</SelectItem>
                  <SelectItem value="united_states">United States</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="source-type">Energy Source Type</Label>
              <Select value={sourceType} onValueChange={setSourceType} required>
                <SelectTrigger id="source-type">
                  <SelectValue placeholder="Select source type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="solar">Solar</SelectItem>
                  <SelectItem disabled={true} value="wind">
                    Wind
                  </SelectItem>
                  <SelectItem disabled={true} value="hydro">
                    Hydro
                  </SelectItem>
                  <SelectItem disabled={true} value="geothermal">
                    Geothermal
                  </SelectItem>
                  <SelectItem disabled={true} value="biomass">
                    Biomass
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="energy-value">Energy Value</Label>
              <Input
                id="energy-value"
                type="number"
                placeholder="Enter energy value"
                value={energyValue}
                onChange={(e) => setEnergyValue(e.target.value)}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="energy-unit">Energy Unit</Label>
              <Select value={energyUnit} onValueChange={setEnergyUnit} required>
                <SelectTrigger id="energy-unit">
                  <SelectValue placeholder="Select unit" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem disabled={true} value="KWh">
                    kWh
                  </SelectItem>
                  <SelectItem value="MWh">MWh</SelectItem>
                  <SelectItem value="GWh">GWh</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="price">Price per Carbon Credit (USD)</Label>
              <Input
                id="price"
                type="number"
                step="0.01"
                placeholder="Enter price in $ USD"
                value={pricePerCredit}
                onChange={(e) => setPricePerCredit(e.target.value)}
                required
              />
            </div>
          </div>

          <div className="bg-green-50 p-4 rounded-lg border border-green-200">
            <h3 className="font-medium text-green-800 mb-2">
              How Carbon Credits Are Calculated
            </h3>
            <p className="text-sm text-green-700">
              Carbon credits are calculated based on your energy production and
              the grid emission factor for your country. The formula used is:
              Energy Value × Grid Emission Factor = Carbon Credits.
            </p>
          </div>
        </form>
      </CardContent>
      <CardFooter>
        <Button
          onClick={handleSubmit}
          disabled={
            loading ||
            !country ||
            !energyValue ||
            !energyUnit ||
            !sourceType ||
            !pricePerCredit
          }
          className="ml-auto bg-green-600 hover:bg-green-700"
        >
          {loading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Carbon Credits"
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}
