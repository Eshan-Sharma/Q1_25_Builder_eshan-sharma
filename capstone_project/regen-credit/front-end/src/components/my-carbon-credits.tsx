"use client";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Leaf, ArrowUpRight } from "lucide-react";

// Solana & Anchor imports
import {
  useAnchorWallet,
  useConnection,
  useWallet,
} from "@solana/wallet-adapter-react";
import { AnchorProvider, Program, setProvider, web3 } from "@coral-xyz/anchor";
import { RegenCredit } from "../../../target/types/regen_credit";
import idl from "../../../target/idl/regen_credit.json"; // this is the idl file generated by anchor
import { PublicKey } from "@solana/web3.js";

// Mock data for owned carbon credits
const mockOwnedCredits = [
  {
    id: "nft-001",
    amount: 5,
    sourceType: "solar",
    country: "usa",
    purchasedAt: "2023-09-15",
    transactionId: "5jB2rJXL9aPmj1fgM9ckVEPF3QPuQsYhX7PVozMRtC5H",
    seller: "8xDr5JxL9aPmj1fgM9ckVEPF3QPuQsYhX7PVozMRtC5H",
  },
  {
    id: "nft-002",
    amount: 3,
    sourceType: "wind",
    country: "germany",
    purchasedAt: "2023-09-22",
    transactionId: "7kC3sKXL9aPmj1fgM9ckVEPF3QPuQsYhX7PVozMRtC5H",
    seller: "6Ede7dBW8q7uVJpKCLBwfCXNVJxUTvxDCpP2LzKxrHbG",
  },
];

// Mock data for created carbon credits
const mockCreatedCredits = [
  {
    id: "cc-001",
    amount: 25,
    remaining: 20,
    sourceType: "solar",
    country: "usa",
    createdAt: "2023-05-15",
    price: 0.05,
    listed: true,
  },
  {
    id: "cc-002",
    amount: 18,
    remaining: 18,
    sourceType: "wind",
    country: "germany",
    createdAt: "2023-06-22",
    price: null,
    listed: false,
  },
];

export function MyCarbonCredits() {
  const wallet = useAnchorWallet();
  const { connection } = useConnection();
  if (!wallet) {
    console.error("Wallet not connected");
    return;
  }
  const provider = new AnchorProvider(connection, wallet, {
    commitment: "confirmed",
  });
  setProvider(provider);

  const program = new Program(idl as RegenCredit, provider);

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>My Carbon Credits</CardTitle>
        <CardDescription>
          View your created and purchased carbon credits.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="purchased" className="w-full">
          <TabsList className="grid grid-cols-2 mb-6">
            <TabsTrigger value="purchased">Purchased Credits</TabsTrigger>
            <TabsTrigger value="created">Created Credits</TabsTrigger>
          </TabsList>

          <TabsContent value="purchased">
            <div className="space-y-4">
              {mockOwnedCredits.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  You haven't purchased any carbon credits yet.
                </div>
              ) : (
                mockOwnedCredits.map((credit) => (
                  <div
                    key={credit.id}
                    className="p-4 rounded-lg border border-gray-200"
                  >
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex items-center gap-2">
                        <Leaf className="h-5 w-5 text-green-600" />
                        <h3 className="font-medium">
                          {credit.amount} Carbon Credits
                        </h3>
                      </div>
                      <Badge
                        variant="outline"
                        className="bg-green-50 text-green-700 hover:bg-green-50"
                      >
                        NFT
                      </Badge>
                    </div>

                    <div className="mb-4 text-sm text-gray-600">
                      <p>
                        Source:{" "}
                        {credit.sourceType.charAt(0).toUpperCase() +
                          credit.sourceType.slice(1)}
                      </p>
                      <p>Country: {credit.country.toUpperCase()}</p>
                      <p>Purchased: {credit.purchasedAt}</p>
                    </div>

                    <div className="text-xs text-gray-500 flex items-center gap-1">
                      <span>View on Explorer</span>
                      <ArrowUpRight className="h-3 w-3" />
                    </div>
                  </div>
                ))
              )}
            </div>
          </TabsContent>

          <TabsContent value="created">
            <div className="space-y-4">
              {mockCreatedCredits.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  You haven't created any carbon credits yet.
                </div>
              ) : (
                mockCreatedCredits.map((credit) => (
                  <div
                    key={credit.id}
                    className="p-4 rounded-lg border border-gray-200"
                  >
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex items-center gap-2">
                        <Leaf className="h-5 w-5 text-green-600" />
                        <h3 className="font-medium">
                          {credit.amount} Carbon Credits
                        </h3>
                        <span className="text-sm text-gray-500">
                          ({credit.remaining} remaining)
                        </span>
                      </div>
                      <Badge
                        variant="outline"
                        className={
                          credit.listed
                            ? "bg-blue-50 text-blue-700 hover:bg-blue-50"
                            : "bg-gray-50 text-gray-700 hover:bg-gray-50"
                        }
                      >
                        {credit.listed ? "Listed" : "Not Listed"}
                      </Badge>
                    </div>

                    <div className="mb-4 text-sm text-gray-600">
                      <p>
                        Source:{" "}
                        {credit.sourceType.charAt(0).toUpperCase() +
                          credit.sourceType.slice(1)}
                      </p>
                      <p>Country: {credit.country.toUpperCase()}</p>
                      <p>Created: {credit.createdAt}</p>
                      {credit.price && (
                        <p>Listed Price: {credit.price} SOL per credit</p>
                      )}
                    </div>

                    <div className="text-xs text-gray-500 flex items-center gap-1">
                      <span>View on Explorer</span>
                      <ArrowUpRight className="h-3 w-3" />
                    </div>
                  </div>
                ))
              )}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}
