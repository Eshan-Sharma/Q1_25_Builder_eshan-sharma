"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { Loader2, Leaf } from "lucide-react";

// Solana & Anchor imports
import {
  useAnchorWallet,
  useConnection,
  useWallet,
} from "@solana/wallet-adapter-react";
import { AnchorProvider, Program, setProvider, web3 } from "@coral-xyz/anchor";
import { RegenCredit } from "../../../target/types/regen_credit";
import idl from "../../../target/idl/regen_credit.json"; // this is the idl file generated by anchor
import { PublicKey } from "@solana/web3.js";

// Mock data for carbon credits
const mockCarbonCredits = [
  {
    id: "cc-001",
    amount: 25,
    sourceType: "solar",
    country: "usa",
    createdAt: "2023-05-15",
    listed: false,
  },
  {
    id: "cc-002",
    amount: 18,
    sourceType: "wind",
    country: "germany",
    createdAt: "2023-06-22",
    listed: false,
  },
];

export function ListCarbonCredits() {
  const [loading, setLoading] = useState(false);
  const [selectedCredit, setSelectedCredit] = useState<string | null>(null);
  const [price, setPrice] = useState("");

  const wallet = useAnchorWallet();
  const { connection } = useConnection();
  if (!wallet) {
    console.error("Wallet not connected");
    return;
  }
  const provider = new AnchorProvider(connection, wallet, {
    commitment: "confirmed",
  });
  setProvider(provider);

  const program = new Program(idl as RegenCredit, provider);

  const handleList = () => {
    if (!selectedCredit || !price) return;

    setLoading(true);

    // Simulate blockchain transaction
    setTimeout(() => {
      setLoading(false);
      toast(`Successfully listed your carbon credits on the marketplace.`);

      // Reset form
      setSelectedCredit(null);
      setPrice("");
    }, 2000);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>List Carbon Credits</CardTitle>
        <CardDescription>
          List your carbon credits on the marketplace for others to purchase.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          <div className="space-y-4">
            <Label>Select Carbon Credits to List</Label>
            <div className="grid grid-cols-1 gap-4">
              {mockCarbonCredits.map((credit) => (
                <div
                  key={credit.id}
                  className={`p-4 rounded-lg border cursor-pointer transition-colors ${
                    selectedCredit === credit.id
                      ? "border-green-500 bg-green-50"
                      : "border-gray-200 hover:border-green-300"
                  }`}
                  onClick={() => setSelectedCredit(credit.id)}
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <div className="flex items-center gap-2">
                        <Leaf className="h-5 w-5 text-green-600" />
                        <h3 className="font-medium">
                          {credit.amount} Carbon Credits
                        </h3>
                      </div>
                      <div className="mt-2 text-sm text-gray-600">
                        <p>
                          Source:{" "}
                          {credit.sourceType.charAt(0).toUpperCase() +
                            credit.sourceType.slice(1)}
                        </p>
                        <p>Country: {credit.country.toUpperCase()}</p>
                        <p>Created: {credit.createdAt}</p>
                      </div>
                    </div>
                    <div className="text-xs px-2 py-1 rounded bg-gray-100 text-gray-700">
                      {credit.listed ? "Listed" : "Not Listed"}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {selectedCredit && (
            <div className="space-y-2">
              <Label htmlFor="price">Price per Carbon Credit (SOL)</Label>
              <Input
                id="price"
                type="number"
                step="0.01"
                placeholder="Enter price in SOL"
                value={price}
                onChange={(e) => setPrice(e.target.value)}
                required
              />
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter>
        <Button
          onClick={handleList}
          disabled={loading || !selectedCredit || !price}
          className="ml-auto bg-green-600 hover:bg-green-700"
        >
          {loading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Listing...
            </>
          ) : (
            "List on Marketplace"
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}
